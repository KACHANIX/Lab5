//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab4GraphicalClient.Lab4Service {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Lab4Service.ILab4Service")]
    public interface ILab4Service {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Calc", ReplyAction="http://tempuri.org/ILab4Service/CalcResponse")]
        string Calc(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Calc", ReplyAction="http://tempuri.org/ILab4Service/CalcResponse")]
        System.Threading.Tasks.Task<string> CalcAsync(System.DateTime date1, System.DateTime date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Day", ReplyAction="http://tempuri.org/ILab4Service/DayResponse")]
        string Day(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Day", ReplyAction="http://tempuri.org/ILab4Service/DayResponse")]
        System.Threading.Tasks.Task<string> DayAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Check", ReplyAction="http://tempuri.org/ILab4Service/CheckResponse")]
        string Check(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Check", ReplyAction="http://tempuri.org/ILab4Service/CheckResponse")]
        System.Threading.Tasks.Task<string> CheckAsync(int year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/SerializeFrom", ReplyAction="http://tempuri.org/ILab4Service/SerializeFromResponse")]
        string SerializeFrom();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/SerializeFrom", ReplyAction="http://tempuri.org/ILab4Service/SerializeFromResponse")]
        System.Threading.Tasks.Task<string> SerializeFromAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Test", ReplyAction="http://tempuri.org/ILab4Service/TestResponse")]
        void Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILab4Service/Test", ReplyAction="http://tempuri.org/ILab4Service/TestResponse")]
        System.Threading.Tasks.Task TestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILab4ServiceChannel : Lab4GraphicalClient.Lab4Service.ILab4Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Lab4ServiceClient : System.ServiceModel.ClientBase<Lab4GraphicalClient.Lab4Service.ILab4Service>, Lab4GraphicalClient.Lab4Service.ILab4Service {
        
        public Lab4ServiceClient() {
        }
        
        public Lab4ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Lab4ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Lab4ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Lab4ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Calc(System.DateTime date1, System.DateTime date2) {
            return base.Channel.Calc(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> CalcAsync(System.DateTime date1, System.DateTime date2) {
            return base.Channel.CalcAsync(date1, date2);
        }
        
        public string Day(System.DateTime date) {
            return base.Channel.Day(date);
        }
        
        public System.Threading.Tasks.Task<string> DayAsync(System.DateTime date) {
            return base.Channel.DayAsync(date);
        }
        
        public string Check(int year) {
            return base.Channel.Check(year);
        }
        
        public System.Threading.Tasks.Task<string> CheckAsync(int year) {
            return base.Channel.CheckAsync(year);
        }
        
        public string SerializeFrom() {
            return base.Channel.SerializeFrom();
        }
        
        public System.Threading.Tasks.Task<string> SerializeFromAsync() {
            return base.Channel.SerializeFromAsync();
        }
        
        public void Test() {
            base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task TestAsync() {
            return base.Channel.TestAsync();
        }
    }
}
